<?php
namespace http;

/**
 * Test class for HttpResponse.
 * Generated by PHPUnit on 2014-11-19 at 14:41:13.
 */
class HttpResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HttpResponse
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MockHttpResponse();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    	
    }
    
    public function testAddHeader() {
    	$this->assertFalse($this->object->hasHeader('header'), 'header already present');
    	$this->object->addHeader('header', 'test');
    	$this->assertTrue($this->object->hasHeader('header'));
    }
    
    public function testAddHeaderAfterHeadersSend() {
    	 // trigger headers sent
    	 ob_start();
    	 $this->object->write('test');
    	 ob_end_clean();
    	 
    	 try {
    	 	$this->object->addHeader('header', 'test');
    	 } catch (\http\HttpException $ex) {
    	 	$this->assertContains('headers already send', $ex->getMessage());
    	 }
    	 
    	 $this->assertFalse($this->object->hasHeader('header'));
    }

    public function testDisableCache() {
    	$this->object->disableCache();
    	
    	$this->assertTrue($this->object->hasHeader('Cache-Control'));
    	$this->assertTrue($this->object->hasHeader('Expires'));
    	$this->assertTrue($this->object->hasHeader('Pragma'));
    }
    
    public function testRedirect() {
    	$this->object->redirect('testloc', 301);
    	
    	$this->assertEquals($this->object->getStatusCode(), 301);
    }
    
    public function testRedirectChangeStatusCode() {
    	$this->object->redirect('testloc', 500);
    	 
    	$this->assertEquals($this->object->getStatusCode(), 302);
    }
    
    /**
     * @covers \http\HttpResponse::getCharSet
     */
    public function testGetCharSet()
    {
        $this->object->setCharSet("UTF-8");
        
        $this->assertEquals($this->object->getCharSet(), "UTF-8");
    }

    /**
     * @covers \http\HttpResponse::getContentType
     */
    public function testGetDefaultContentType()
    {
        $this->assertEquals($this->object->getContentType(), "text/html");
    }
    
    /**
     * @covers \http\HttpResponse::getContentType
     */
    public function testGetContentType()
    {
        $this->object->setContentType("text/xml");
        
        $this->assertEquals($this->object->getContentType(), "text/xml");
    }

    /**
     * @covers \http\HttpResponse::getStatusCode
     */
    public function testGetStatusCode()
    {
        $code = $this->object->getStatusCode();
        
        $this->assertEquals(200, $code, 'Default status code should be 200');
    }
    
    public function testSetCORSHeader() {
    	$this->object->setCORSHeaders();
    	
    	$this->assertTrue($this->object->hasHeader('Access-Control-Allow-Methods'));
    	$this->assertTrue($this->object->hasHeader('Access-Control-Allow-Credentials'));
    	$this->assertTrue($this->object->hasHeader('Access-Control-Max-Age'));
    }

    /**
     * @covers \http\HttpResponse::setStatusCode
     */
    public function testSetStatusCode()
    {
        $this->object->setStatusCode(301);
        $code = $this->object->getStatusCode();
        
        $this->assertEquals(301, $code, 'Status code should be 301');
    }
    
    public function testIsHeaderSendAfterWrite() {
    	$this->assertFalse($this->object->isHeaderSend(), "Headers already send");
    	ob_start();
    	$this->object->write('test');
    	ob_end_clean();
    	$this->assertTrue($this->object->isHeaderSend(), "Headers not send");
    }
    
    public function testHasOutputAfterWrite() {
    	ob_start();
    	$response = new MockHttpResponse();
    	$response->write('test');
    	$content = ob_get_clean();
    	$this->assertEquals($content, 'test');
    }
    
    public function testHasNoOutputAfterWrite() {
    	ob_start();
    	$response = new MockHttpResponse('php://temp');
    	$response->write('test');
    	$content = ob_get_clean();
    	$this->assertEquals($content, '');
    }
}

class MockHttpResponse extends HttpResponse {
	
	private $mockHeaders = array();
	private $headersSend = false;
	
	public function isHeaderSend() {
		return $this->headersSend;
	}
	
	
	
	protected function sendHeader($aCompleteHeader, $aReplace = false, $aStatusCode = null){
		$this->mockHeaders[] = $aCompleteHeader;
		$this->headersSend = true;
	}
	
	public function write($content) {
		parent::write($content);
		$this->headersSend = true;
	}
}
